<?xml version = "1.0" encoding = "UTF-8"?>

<web-app version = "3.0" metadata-complete = "true"
  xmlns = "http://java.sun.com/xml/ns/javaee"
  xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation = "http://java.sun.com/xml/ns/javaee
    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

  <display-name>
    WARLord â€” Web Application Skeleton
  </display-name>


  <!--====================================================
    =                 Context Parameters                 =
    ====================================================-->

  <context-param>
    <description>
      This parameter forbids implicit startup of the Log4j2
      environment from the web fragmen. If allow so, Log4j
      may be turned off before all else modules had done
      their logging thus damaging the log files.
    </description>

    <param-name>isLog4jAutoInitializationDisabled</param-name>
    <param-value>true</param-value>
  </context-param>

  <context-param>
    <description>
      Warlord Application Context is special version of Spring
      Application Context that provides additional information
      to the beans (namely, prototype beans) that are injected
      into else beans as the fields or method arguments. This
      information includes: the list of template classes (for
      beans of template classes) and the field annotations.
    </description>

    <param-name>contextClass</param-name>
    <param-value>
      net.java.web.warlord.object.spring.WarlordApplicationContext
    </param-value>
  </context-param>


  <!--====================================================
    =                      Listeners                     =
    ====================================================-->

  <!-- Logging Boot Initializer -->

  <listener>
    <description>
      The first listener activated during the web application
      startup to bring up the logging facility.
    </description>

    <display-name>Logging Boot Initializer</display-name>
    <listener-class>
      net.java.web.warlord.log.LoggingBootListener
    </listener-class>
  </listener>

  <!-- Spring Context and Request Listeners -->

  <listener>
    <description>
      Spring Framework startup initialization.
    </description>

    <display-name>Spring Startup Context Listener</display-name>
    <listener-class>
      org.springframework.web.context.ContextLoaderListener
    </listener-class>
  </listener>

  <listener>
    <description>
      Initializes the request context for Spring Framework.
    </description>

    <display-name>Spring Request Context Listener</display-name>
    <listener-class>
      org.springframework.web.context.request.RequestContextListener
    </listener-class>
  </listener>


  <!--===================================================
   =                  Filters Bridge                    =
   ====================================================-->

  <filter>
    <description>
      Connects filters processing of the web container
      with the application-level filters (Spring beans).
    </description>

    <filter-name>Filters Bridge</filter-name>

    <filter-class>
      net.java.web.warlord.servlet.filter.FiltersBridge
    </filter-class>
  </filter>

  <filter-mapping>
    <filter-name>Filters Bridge</filter-name>

    <url-pattern>/*</url-pattern>

    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
    <dispatcher>ERROR</dispatcher>
  </filter-mapping>
</web-app>