<?xml version = "1.0" encoding = "UTF-8"?>

<project name = "WARLord" default = "package"
  xmlns:ivy = "antlib:org.apache.ivy.ant">


  <!-- ====[ Shared Variables ]==== -->

  <property name  = "version"
            value = "0.0.1"/>

  <property name  = "archive"
            value = "warlord.war"/>

  <property name  = "build-root"
            value = "${basedir}/build"/>

  <property name  = "sources-root"
            value = "${basedir}/src/main/java"/>

  <property name  = "resources-root"
            value = "${basedir}/src/main/resources"/>

  <property name  = "webapp-root"
            value = "${basedir}/src/main/webapp"/>

  <property name  = "target-root"
            value = "${basedir}/target"/>

  <property name  = "target-classes"
            value = "${target-root}/classes"/>

  <property name  = "ivy-cache"
            value = "${build-root}/.ivy-cache"/>

  <property name  = "warlord-ivy"
            value = "${build-root}/warlord.ivy"/>

  <property name  = "libs-compile"
            value = "${target-root}/.libs-compile"/>

  <property name  = "libs-provided"
            value = "${target-root}/.libs-provided"/>

  <property name  = "libs-runtime"
            value = "${target-root}/.libs-runtime"/>

  <property name  = "libs-sources"
            value = "${target-root}/.libs-sources"/>


  <!-- ====[ Compile Variables ]==== -->

  <property name  = "compile.encoding"
            value = "UTF-8"/>

  <property name  = "compile.version"
            value = "1.8"/>

  <property name  = "resources.encoding"
            value = "UTF-8"/>


  <!-- ====[ Special Variables ]==== -->

  <condition property = "?debug">
    <not>
      <isset property = "release"/>
    </not>
  </condition>



  <!-- ====[ Local Tomcat Distribution ]==== -->

  <import file = "build/tomcat.xml"/>


  <!-- ====[ § Dependenvies via Apache Ivy ]==== -->

  <uptodate  property = "?init-ivy-compile-upt"
    srcfile = "${warlord-ivy}" targetfile = "${libs-compile}"/>

  <condition property = "?init-ivy-compile">
    <and>
      <available type = "dir" file = "${libs-compile}"/>
      <istrue value = "${?init-ivy-compile-upt}"/>
    </and>
  </condition>

  <uptodate  property = "?init-ivy-provided-upt"
    srcfile = "${warlord-ivy}" targetfile = "${libs-provided}"/>

  <condition property = "?init-ivy-provided">
    <and>
      <available type = "dir" file = "${libs-provided}"/>
      <istrue value = "${?init-ivy-compile-upt}"/>
    </and>
  </condition>

  <uptodate  property = "?init-ivy-runtime-upt"
    srcfile = "${warlord-ivy}" targetfile = "${libs-runtime}"/>

  <condition property = "?init-ivy-runtime">
    <and>
      <available type = "dir" file = "${libs-runtime}"/>
      <istrue value = "${?init-ivy-runtime-upt}"/>
    </and>
  </condition>

  <condition property = "?init-ivy-actual">
    <and>
      <istrue value = "${?init-ivy-compile}"/>
      <istrue value = "${?init-ivy-provided}"/>
      <istrue value = "${?init-ivy-runtime}"/>
    </and>
  </condition>


  <!-- ====[ § Apache Ivy Dependencies ]==== -->

  <!-- § init ivy -->

  <target name = "init-ivy" unless = "?init-ivy-actual">

    <delete dir = "${libs-sources}"/>
    <mkdir dir = "${libs-sources}"/>

    <ivy:configure file = "${build-root}/setup.ivy"/>


    <!-- compile -->
    <ivy:resolve file = "${warlord-ivy}"
      conf = "compile" resolveId = "warlord-compile"/>

    <ivy:artifactreport tofile = "${libs-sources}/ivy-compile.xml"/>

    <delete dir = "${libs-compile}"/>
    <ivy:retrieve resolveId = "warlord-compile" type = "jar, bundle"
      pattern = "${libs-compile}/[artifact]-[revision].[ext]"/>


    <!-- provided -->
    <ivy:resolve file = "${warlord-ivy}"
      conf = "provided" resolveId = "warlord-provided"/>

    <ivy:artifactreport tofile = "${libs-sources}/ivy-provided.xml"/>

    <delete dir = "${libs-provided}"/>
    <ivy:retrieve resolveId = "warlord-provided" type = "jar, bundle"
      pattern = "${libs-provided}/[artifact]-[revision].[ext]"/>


    <!-- runtime-->
    <ivy:resolve file = "${warlord-ivy}"
      conf = "runtime" resolveId = "warlord-runtime"/>

    <delete dir = "${libs-runtime}"/>
    <ivy:retrieve resolveId = "warlord-runtime" type = "jar, bundle"
      pattern = "${libs-runtime}/[artifact]-[revision].[ext]"/>


    <!-- sources -->
    <xslt style = "${build-root}/ivy-src.xslt"
      in  = "${libs-sources}/ivy-compile.xml"
      out = "${libs-sources}/ivy-compile-sources.xml">

      <param name = "module" type = "STRING" expression = "compile-sources"/>
    </xslt>

    <ivy:resolve file = "${libs-sources}/ivy-compile-sources.xml"/>
    <ivy:retrieve type = "sources, source, src"
      pattern = "${libs-sources}/[artifact]-[revision].[ext]"/>

    <xslt style = "${build-root}/ivy-src.xslt"
      in  = "${libs-sources}/ivy-provided.xml"
      out = "${libs-sources}/ivy-provided-sources.xml">

      <param name = "module" type = "STRING" expression = "provided-sources"/>
    </xslt>

    <ivy:resolve file = "${libs-sources}/ivy-provided-sources.xml"/>
    <ivy:retrieve type = "sources, source, src"
      pattern = "${libs-sources}/[artifact]-[revision].[ext]"/>
  </target>


  <!-- ====[ § Compile and Package ]==== -->

  <path id = "main-classpath">
    <fileset dir = "${libs-compile}"   includes = "*.jar"/>
    <fileset dir = "${libs-provided}"  includes = "*.jar"/>
  </path>


  <!-- § compile -->

  <target name = "compile" depends = "init-ivy">

    <mkdir dir = "${target-classes}"/>

    <javac srcdir = "${sources-root}"
      destdir  = "${target-classes}"
      debug    = "${?debug}"
      encoding = "${compile.encoding}"
      source   = "${compile.version}"
      target   = "${compile.version}"
      includeAntRuntime = "false">

      <classpath refid = "main-classpath"/>
    </javac>

    <sync todir = "${target-classes}"
      overwrite = "true" includeEmptyDirs = "true">

      <!-- copy resources messed with java classes -->
      <fileset dir = "${sources-root}">
        <exclude name = "**/*.java"/>
      </fileset>

      <!-- copy separated resources -->
      <fileset dir = "${resources-root}"/>

      <preserveintarget>
        <include name = "**/*.class"/>
      </preserveintarget>
    </sync>
  </target>


  <!-- § package -->

  <target name = "package" depends = "compile">

    <jar destfile = "${target-root}/${archive}"
      basedir  = "${webapp-root}"
      encoding = "${compile.encoding}"
      compress = "false">

      <!-- copy the compiled classes and resources -->
      <zipfileset prefix = "WEB-INF/classes"
        dir = "${target-classes}"/>

      <!-- copy the compile libraries -->
      <zipfileset prefix = "WEB-INF/lib"
        dir = "${libs-compile}"/>

      <!-- copy the runtime libraries -->
      <zipfileset prefix = "WEB-INF/lib"
        dir = "${libs-runtime}"/>
    </jar>
  </target>


  <!-- ====[ § Test Tomcat Installation ]==== -->





  <!-- ====[ § Styles and Scripts via Node.js Utilities ]==== -->

  <!--
       Note that this tasks are for the development stages only.
       Node.js (NPM of Node-Sass) is not required to build the
       Java Web application iteself.
  -->

  <!-- § creates overall style-sheet -->

  <target name = "styles">

    <!-- sass utility for windows -->
    <condition property = "node-sass" value = "node-sass.bat">
      <os family = "windows"/>
    </condition>

    <!-- sass utility for unix -->
    <property name = "node-sass" value = "node-sass"/>

    <!-- clean-css utility for windows -->
    <condition property = "cleancss" value = "cleancss.bat">
      <os family = "windows"/>
    </condition>

    <!-- clean-css utility for unix -->
    <property name = "cleancss" value = "cleancss"/>

    <!-- build styles from sass files -->
    <exec executable = "${node-sass}" dir = "src/styles">
      <arg value = "app.scss"/>
      <arg value = "app.tmp.css"/>
    </exec>

    <!-- pack-compress all in single file -->
    <exec executable = "${cleancss}" dir = "src/styles">
      <arg value = "-O2"/>
      <arg value = "-O1"/>
      <arg value = "specialComments:off"/>
      <arg value = "-o"/>
      <arg value = "app.css"/>
      <arg value = "app.tmp.css"/>
    </exec>

    <delete file = "src/styles/app.tmp.css"/>
    <move file = "src/styles/app.css" todir = "src/main/webapp"/>
  </target>


  <!-- ====[ § Miscellaneous Utilities ]==== -->

  <!-- § start test tomcat server -->

  <target name = "test-start" depends = "package, tomcat-install">

    <copy todir = "${tomcat-target}/webapps"
      file = "${target-root}/${archive}"/>

    <antcall target = "tomcat-start"/>
  </target>


  <!-- § clean the project -->

  <target name = "clean">
    <delete dir = "${target-root}"/>
  </target>

  <target name = "clean-all" depends = "clean">
    <delete dir = "${ivy-cache}"/>
  </target>
</project>